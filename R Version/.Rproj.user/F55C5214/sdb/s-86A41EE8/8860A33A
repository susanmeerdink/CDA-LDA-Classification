{
    "collab_server" : "",
    "contents" : "#' Read ENVI spectral libraries\n#' \n#' read/write support for ENVI spectral libraries\n#' \n#' @param path Path to spectral library file with ending .sli.\n#' @details\n#' ENVI spectral libraries consist of a binary data file (.sli) and a corresponding header (.hdr, or .sli.hdr) file. \n#' @return \n#' The spectral libraries are read into a data.frame. The first column contains the wavelengths and the remaining columns contain the spectra.\n#' @seealso \\code{\\link{writeSLI}}\n#' @export \n#' @template examples_SLI\nreadSLI <- function(path) {\n    \n    ## Figure out file naming convention of hdr file for (filename.sli + filename.hdr)\n    ## Does not read in file with (filename.sli + filename.sli.hdr) anymore\n    if (grepl(\".sli\",path) == TRUE){\n      hdr_path <- sub(\".sli\",\".hdr\",path)\n      data_path <- path\n    }else{\n      hdr_path <- paste0(path, \".hdr\")\n      data_path <- paste0(path, \".sli\")\n    }\n\n    if (!file.exists(hdr_path)){\n      stop(paste0(\"Can't find header file of \", path), call.= FALSE)\n    }\n     \n    ## Get header info\n    hdr   <- readLines(hdr_path, n=-1L)\n    bands <- .getNumeric(hdr[grep(\"samples\", hdr)])\n    lines <- .getNumeric(hdr[grep(\"lines\", hdr)])\n    data_type <- .getNumeric(hdr[grep(\"data type\", hdr)])\n    \n    ## Extract spectra labels\n    id <- .bracketRange(hdr, \"spectra names\")\n    if(id[1]==id[2]) {\n        labels <- hdr[(id[1])]\n        labels <- strsplit(labels, \"[{]\")[[1]][2]\n    } else {\n        labels <- hdr[(id[1]+1):(id[2])]\n    }\n    \n    labels <- gsub( \"\\\\}| \", \"\", paste(labels, collapse = \",\"))\n    labels <- unlist(strsplit(gsub(\",,\",\",\", labels), \",\"))\n    \n    ## Extract wavelengths\n    id <- .bracketRange(hdr, \"wavelength = \")\n    wavelengths <- hdr[(id[1]+1):(id[2])]\n    wavelengths <- gsub( \"\\\\}| \", \"\", paste( wavelengths, collapse=\",\"))\n    wavelengths <- as.numeric( unlist( strsplit( gsub(\",,\",\",\", wavelengths), \",\")))\n    print('Done with header')\n    \n    ## Read binary sli file\n    if (data_type == 4) bytes <- 4\n    if (data_type == 5) bytes <- 8\n    x <- data.frame(matrix(nrow=bands, ncol=lines))\n    print('Finished creating matrix')\n    datafile <- file(data_path,'rb')\n    x[] <- readBin(datafile, \"integer\", n = (bands*lines), size = bytes)\n    print('Created library')\n    colnames(x) <- labels\n    x <- cbind(wavelengths,x)\n    colnames(x)[1] <- \"wavelength\"\n    return(x)\n    \n} ## EOF readSLI\n\n#' Write ENVI spectral libraries\n#' \n#' Writes binary ENVI spectral library files (sli) with accompanying header (.sli.hdr) files OR ASCII spectral library files in ENVI format. \n#' \n#' ENVI spectral libraries with ending .sli are binary arrays with spectra saved in rows. \n#' \n#' @param path path to spectral library file to be created.\n#' @param x data.frame with first column containing wavelengths and all other columns containing spectra.\n#' @param wavl.units wavelength units. Defaults to Micrometers. Nanometers is another typical option.\n#' @param scaleF optional reflectance scaling factor. Defaults to 1.\n#' @param mode character string specifying output file type. Must be one of \\code{\"bin\"} for binary .sli files or \\code{\"ASCII\"} for --guess what-- ASCII spectral library files (still in an ENVI compatible format).\n#' @seealso \\code{\\link{readSLI}}\n#' @export\n#' @template examples_SLI\nwriteSLI <- function(x, path, wavl.units=\"Micrometers\", scaleF=1, mode=\"bin\") {\n    \n    ## Begin write binary mode\n    if (mode== \"bin\") {\n        ## Write header file\n        sink(paste0(path,\".hdr\"))\n        writeLines(paste0(\"ENVI\\ndescription = {\\n   ENVI SpecLib created using RStoolbox for R [\", date(), \"]}\",\n                        \"\\nsamples = \", nrow(x),\n                        \"\\nlines   = \", ncol(x) - 1,\n                        \"\\nbands   = \", 1,\n                        \"\\nheader offset = 0\",\n                        \"\\nfile type = ENVI Spectral Library\",\n                        \"\\ndata type = 5\",\n                        \"\\ninterleave = bsq\",\n                        \"\\nsensor type = Unknown\",\n                        \"\\nbyte order = 0\",\n                        \"\\nwavelength units = \", wavl.units, \n                        \"\\nreflectance scale factor = \", scaleF,\n                        \"\\nz plot range = {0.00,\", ceiling(max(x[,2])*1.2),\"}\",\n                        \"\\nz plot titles = {Wavelength, Reflectance}\",\n                        \"\\nband names = {\",\n                        \"\\nSpectral Library}\",\n                        \"\\nspectra names = {\\n \",\n                        paste(colnames(x)[-1],collapse=\", \"),\"}\",\n                        \"\\nwavelength = {\\n \",\n                        paste(x[,1],collapse=\", \"),\"}\"))\n        sink()\n        \n        ## Write actual binary file\n        x1 <- as.vector(unlist(x[,-1]))\n        writeBin(x1, path)\n    } ## End write binary mode\n    \n    ## Begin write ASCII mode\n    if (mode == \"ASCII\") {\n        ## Create column descriptions\n        collector <- character()\n        for(i in 2:ncol(x)){\n            collector <- append(collector, paste0(\"\\nColumn \", i, \": \", colnames(x)[i], \"~~\",i))\n        }\n        sink(path)\n        ## Write txt file header\n        writeLines(paste0(\"ENVI ASCII Plot File [\", date(),\"]\\n\",\n                        \"Column 1: wavelength [!7l!3m]!N\", \n                        paste0(collector, collapse=\"\")))\n        sink()\n        ## Append data\n        write.table(data.frame(x=rep(\"\",nrow(x)),x), path, sep=\"  \", append= TRUE , row.names= FALSE, col.names= FALSE, quote= FALSE)\n    } ## End ASCII mode\n    \n} ## EOF writeSLI\n\n\n## Helper functions\n## Find matching bracket to a matched pattern\n.bracketRange <- function(x, pattern) {\n    begin   <- which(grepl(pattern, x))\n    closers <- which(grepl(\"}\", x))\n    if(begin %in% closers){\n        # Openeing and closing brackets on the same line\n        return(rep(begin, 2))\n    } else {\n        # Opening and closing brackets on different lines\n        end <- closers[(closers - begin) > 0][1]\n        return(c(begin, end))\n    }\n}\n\n\n\n\n\n\n",
    "created" : 1465856058776.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3525552179",
    "id" : "8860A33A",
    "lastKnownWriteTime" : 1465855543,
    "last_content_update" : 1465855543,
    "path" : "H:/users/meerdink/GitHub/RStoolbox/R/readSLI.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}